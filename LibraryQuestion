Got it! Letâ€™s design a **single lab test question** that combines **all four pillars of OOP**â€”encapsulation, abstraction, inheritance, and polymorphismâ€”into one integrated, slightly challenging problem suitable for a **lab test**. Hereâ€™s a thoughtfully crafted question:

---

## ðŸ§ª Lab Test Question: Four Pillars of OOP Combined

### Question:

**Design and implement a simple library management system that uses all four pillars of OOP (Encapsulation, Abstraction, Inheritance, and Polymorphism). Follow the requirements below:**

1. **Encapsulation**:

   * Create a base class called `LibraryItem` with private fields:

     * `title` (String)
     * `itemID` (int)
     * `available` (boolean)
   * Provide public methods to **get and set** these fields where appropriate (e.g. `getTitle()`, `setAvailable()`).

2. **Abstraction**:

   * Define an **abstract class** or **interface** (based on your language) named `Borrowable` with the following abstract methods:

     * `borrowItem()`
     * `returnItem()`

3. **Inheritance**:

   * Derive two subclasses from `LibraryItem`: `Book` and `DVD`.

     * Both should **implement** the `Borrowable` interface/abstract class.
     * Add additional fields:

       * For `Book`: `author` (String)
       * For `DVD`: `duration` (int) in minutes

4. **Polymorphism**:

   * Implement a method in your main program or a `Library` class that takes a list (or array) of `LibraryItem` references and calls their `borrowItem()` method polymorphically.
   * Demonstrate **method overriding** by implementing `borrowItem()` and `returnItem()` differently for `Book` and `DVD`.

### Additional Requirements:

* Include a **main method** (or equivalent entry point) to:

  * Create a few sample `Book` and `DVD` objects.
  * Store them in a collection (`List`, `Array`, etc.).
  * Call `borrowItem()` and `returnItem()` for each item.
  * Display the status of each item (e.g. borrowed or available).
* Ensure **data hiding** by making all fields private and providing proper getter/setter methods.
* Add appropriate **comments** to explain how each pillar of OOP is applied.

---

### Hints:

* Use **constructors** to initialize objects with their relevant fields.
* Use **dynamic method dispatch** (polymorphism) when calling `borrowItem()` through `LibraryItem` references.
* Think about **error handling** (e.g. if an item is already borrowed, prevent borrowing again).

---

Would you like me to **write a sample solution** in a particular language (e.g. Java, Python, or C++)? Let me know! ðŸ“šðŸ’»
